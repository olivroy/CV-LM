// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// cvLM
List cvLM(const Eigen::VectorXd& y, const Eigen::MatrixXd& X, int K, const int& seed, const String& pivot, const bool& rankCheck);
RcppExport SEXP _cvLM_cvLM(SEXP ySEXP, SEXP XSEXP, SEXP KSEXP, SEXP seedSEXP, SEXP pivotSEXP, SEXP rankCheckSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type X(XSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< const int& >::type seed(seedSEXP);
    Rcpp::traits::input_parameter< const String& >::type pivot(pivotSEXP);
    Rcpp::traits::input_parameter< const bool& >::type rankCheck(rankCheckSEXP);
    rcpp_result_gen = Rcpp::wrap(cvLM(y, X, K, seed, pivot, rankCheck));
    return rcpp_result_gen;
END_RCPP
}
// parcvLM
List parcvLM(const Eigen::VectorXd& y, const Eigen::MatrixXd& X, int K, const int& seed, const String& pivot, const bool& rankCheck);
RcppExport SEXP _cvLM_parcvLM(SEXP ySEXP, SEXP XSEXP, SEXP KSEXP, SEXP seedSEXP, SEXP pivotSEXP, SEXP rankCheckSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type X(XSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< const int& >::type seed(seedSEXP);
    Rcpp::traits::input_parameter< const String& >::type pivot(pivotSEXP);
    Rcpp::traits::input_parameter< const bool& >::type rankCheck(rankCheckSEXP);
    rcpp_result_gen = Rcpp::wrap(parcvLM(y, X, K, seed, pivot, rankCheck));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_cvLM_cvLM", (DL_FUNC) &_cvLM_cvLM, 6},
    {"_cvLM_parcvLM", (DL_FUNC) &_cvLM_parcvLM, 6},
    {NULL, NULL, 0}
};

RcppExport void R_init_cvLM(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
